STORE_APP_ROOT := "StoreApp"

CONTAINER_TAGNAME := "revp1"
CONTAINER_REGISTRY := "registry.digitalocean.com/jwl"
DEPLOYMENT := "revp1"

@bump-version:
  echo $(awk -F= '{print "TAG_VERSION="$2+1}' .env) > .env

build-styles:
    sass {{STORE_APP_ROOT}}/styles/entry.scss {{STORE_APP_ROOT}}/wwwroot/css/site.css

build-app:
    cd {{STORE_APP_ROOT}} && dotnet build

build-all:
    just build-styles
    just build-app

run: build-app build-styles
    cd {{STORE_APP_ROOT}} && dotnet run

migrate:
    cd {{STORE_APP_ROOT}} && dotnet ef database update
    
fresh-migrate:
    rm -f {{STORE_APP_ROOT}}/store.sqlite
    cd {{STORE_APP_ROOT}} && dotnet ef database update

test:
    cd Tests && dotnet test

# Delete migrations and rebuild the database from the program models.
rebuild-migrations y_to_confirm:
    rm -f {{STORE_APP_ROOT}}/store.sqlite
    rm -Rf {{STORE_APP_ROOT}}/Migrations
    cd {{STORE_APP_ROOT}} && dotnet ef migrations add InitialCreate
    just migrate

coverage:
    cd Tests && dotnet test --collect:"XPlat Code Coverage"

coverage-report report:
    reportgenerator -reports:{{report}} -targetdir:Tests/TestResults/report "-reporttypes:Html;TextSummary"

build-for-docker: build-styles bump-version
    #cd {{STORE_APP_ROOT}} && dotnet publish -c Release -r linux-x64 --self-contained
    cd {{STORE_APP_ROOT}} && dotnet publish -c Release -o bin -r linux-musl-x64 --self-contained true /p:PublishTrimmed=true
    cd {{STORE_APP_ROOT}} && cp -r wwwroot bin/Release/netcoreapp3.1/linux-musl-x64
    cd {{STORE_APP_ROOT}} && cp store.sqlite bin/Release/netcoreapp3.1/linux-musl-x64/store.sqlite

create-docker-image:
    sudo docker build -t {{CONTAINER_TAGNAME}}:latest .

build-container:
    sudo docker build -t {{CONTAINER_TAGNAME}}:latest .
    sudo docker tag {{CONTAINER_TAGNAME}}:latest {{CONTAINER_REGISTRY}}/{{CONTAINER_TAGNAME}}:latest

    sudo docker build -t {{CONTAINER_TAGNAME}}:v$TAG_VERSION .
    sudo docker tag {{CONTAINER_TAGNAME}}:v$TAG_VERSION {{CONTAINER_REGISTRY}}/{{CONTAINER_TAGNAME}}:v$TAG_VERSION

push-container:
    sudo docker push {{CONTAINER_REGISTRY}}/{{CONTAINER_TAGNAME}}:latest
    sudo docker push {{CONTAINER_REGISTRY}}/{{CONTAINER_TAGNAME}}:v$TAG_VERSION

rollout:
    kubectl set image deployment/{{DEPLOYMENT}} {{CONTAINER_TAGNAME}}=registry.digitalocean.com/jwl/{{CONTAINER_TAGNAME}}:v$TAG_VERSION

rollout-status:
    kubectl rollout status deployment.v1.apps/{{DEPLOYMENT}}

rebuild-and-deploy:
    just build-for-docker
    just create-docker-image
    just build-container
    just push-container
    just rollout
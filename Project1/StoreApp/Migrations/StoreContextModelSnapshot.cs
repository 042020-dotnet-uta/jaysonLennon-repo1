// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreApp.Data;

namespace StoreApp.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("StoreApp.Entity.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Line1AddressLine1Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Line2AddressLine2Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ZipCodeId")
                        .HasColumnType("TEXT");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("Line1AddressLine1Id");

                    b.HasIndex("Line2AddressLine2Id");

                    b.HasIndex("StateId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("StoreApp.Entity.AddressLine1", b =>
                {
                    b.Property<Guid>("AddressLine1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.HasKey("AddressLine1Id");

                    b.ToTable("AddressLine1s");
                });

            modelBuilder.Entity("StoreApp.Entity.AddressLine2", b =>
                {
                    b.Property<Guid>("AddressLine2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.HasKey("AddressLine2Id");

                    b.ToTable("AddressLine2s");
                });

            modelBuilder.Entity("StoreApp.Entity.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("StoreApp.Entity.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.HasIndex("AddressId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StoreApp.Entity.LocationInventory", b =>
                {
                    b.Property<Guid>("LocationInventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("LocationInventoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("LocationInventories");
                });

            modelBuilder.Entity("StoreApp.Entity.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AmountPaid")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("CustomerUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TimeCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TimeFulfilled")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TimeSubmitted")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("LocationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreApp.Entity.OrderLineItem", b =>
                {
                    b.Property<Guid>("OrderLineItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AmountCharged")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderLineItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderLineItems");
                });

            modelBuilder.Entity("StoreApp.Entity.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreApp.Entity.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("StoreApp.Entity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefaultLocationLocationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId");

                    b.HasIndex("DefaultLocationLocationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StoreApp.Entity.ZipCode", b =>
                {
                    b.Property<Guid>("ZipCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.HasKey("ZipCodeId");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("StoreApp.Entity.Address", b =>
                {
                    b.HasOne("StoreApp.Entity.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("StoreApp.Entity.AddressLine1", "Line1")
                        .WithMany()
                        .HasForeignKey("Line1AddressLine1Id");

                    b.HasOne("StoreApp.Entity.AddressLine2", "Line2")
                        .WithMany()
                        .HasForeignKey("Line2AddressLine2Id");

                    b.HasOne("StoreApp.Entity.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("StoreApp.Entity.ZipCode", "Zip")
                        .WithMany()
                        .HasForeignKey("ZipCodeId");
                });

            modelBuilder.Entity("StoreApp.Entity.Location", b =>
                {
                    b.HasOne("StoreApp.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("StoreApp.Entity.LocationInventory", b =>
                {
                    b.HasOne("StoreApp.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreApp.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("StoreApp.Entity.Order", b =>
                {
                    b.HasOne("StoreApp.Entity.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUserId");

                    b.HasOne("StoreApp.Entity.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("StoreApp.Entity.OrderLineItem", b =>
                {
                    b.HasOne("StoreApp.Entity.Order", "Order")
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("StoreApp.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("StoreApp.Entity.User", b =>
                {
                    b.HasOne("StoreApp.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("StoreApp.Entity.Location", "DefaultLocation")
                        .WithMany()
                        .HasForeignKey("DefaultLocationLocationId");
                });
#pragma warning restore 612, 618
        }
    }
}

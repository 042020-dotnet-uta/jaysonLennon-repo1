<h1 class="text-center">Customer Search</h1>
<partial name="/Views/Partials/FlashMessagePartial.cshtml" />

<div class="text-center my4">
    Protip: Use a comma <em>(,)</em> between names to search for customers by last name first.
</div>

<div class="flex-col items-center">
    <form class="my4">
        <label for="search-box">Query</label>
        <input type="text" name="search-box" id="customer-search-input" placeholder="Customer Name" autofocus>
    </form>
</div>

<h2 class="text-center">Results</h2>

<div class="flex-col items-center">
    <table class="order-table">
        <thead>
            <tr>
                <th class="p2 color-bg-brand text-bold text-gray-50">Revenue</th>
                <th class="p2 color-bg-brand text-bold text-gray-50 width-100">Name</th>
            </tr>
        </thead>
        <tbody id="customer-search-results-container"></tbody>
    </table>
</div>

<script>
window.addEventListener("load", function() {
    // Applies highlighting to raw text using spans.
    // Returns a new element that may be inserted into the DOM.
    //
    // The highlighter will apply a highlight to every string present
    // in the arrayOfSubstrToHighlight array.
    //
    // classToApply is the clasname to be applied to the highlighted
    // characters.
    function highlight(text, arrayOfSubstrToHighlight, classToApply) {
        // This function works by creating an array of booleans
        // corresponding to the length of the input text.
        //
        // Whenever a letter in the text should be highlighted, the
        // corresponding index in the boolean array is switched to
        // true incidating that the letter should be highlighted.
        //
        // Once all substrings have been searched in the text,
        // elements are created for each letter and a
        // class is applied to the ones with true entries in
        // the boolean array.
        let container = document.createElement("span");

        // Generate boolean array indicating whether a letter in the
        // text should be highlighted.
        let highlightIndices = [];
        for (let i = 0; i < text.length; i++) {
            highlightIndices.push(false);
        }

        // Iterate through each substring
        for (let i = 0; i < arrayOfSubstrToHighlight.length; i++) {
            let substr = arrayOfSubstrToHighlight[i];
            let matchIndex = text.toLowerCase().indexOf(substr);
            if (matchIndex != -1) {
                // For each letter in the original text, set the corresponding
                // value in highlightIndices to true.
                for (let c = matchIndex; c < matchIndex + substr.length; c++) {
                    highlightIndices[c] = true;
                }
            }
        }

        // Iterate through the text to build the element.
        for (let c = 0; c < text.length; c++) {
            let letter = document.createElement("span");
            letter.innerText = text[c];
            if (highlightIndices[c] === true) {
                letter.classList.add(classToApply);
            }
            container.appendChild(letter);
        }

        return container;
    }

    let resultsContainer = document.getElementById("customer-search-results-container");
    let searchInput = document.getElementById("customer-search-input");
    if (!resultsContainer || !searchInput) { console.error("missing elements required to search customers"); }

    // Time in ms to wait before sending a query to the server.
    let searchInputDebounceTime = 200;

    // Function to build the search results into elements.
    let resultBuilder = function(searchResults) {
        function noResultsEl() {
            let noResultsTd = document.createElement("td");
            noResultsTd.classList.add("text-center");
            noResultsTd.setAttribute("colspan", "2");
            noResultsTd.innerText = "No users found";

            let noResultsTr = document.createElement("tr");
            noResultsTr.appendChild(noResultsTd);
            return noResultsTr;
        }

        let highlightClass = "search-result-highlight";

        // Clear out old results first.
        resultsContainer.innerHTML = "";

        if (searchResults.users === undefined) {
            resultsContainer.appendChild(noResultsEl());
            return;
        }

        if (searchResults.users.length == 0) {
            resultsContainer.appendChild(noResultsEl());
        }

        // Iterate through each result.
        for (let i = 0; i < searchResults.users.length; i++) {
            let user = searchResults.users[i];

            let tr = document.createElement("tr");

            // Revenue
            let tdRevenue = document.createElement("td");
            tdRevenue.innerText = "$" + user.revenue;
            tdRevenue.classList.add("p2");
            tr.appendChild(tdRevenue);

            // Name
            let tdName = document.createElement("td");
            tdName.classList.add("p2");
            if (searchResults.isOmniQuery) {
                // Omniqueries check both the first and last name for the search
                // term(s), so we highlight the terms in both names.
                let firstName = highlight(user.firstName, [searchResults.queryTerm1, searchResults.queryTerm2], highlightClass);
                let lastName = highlight(user.lastName, [searchResults.queryTerm1, searchResults.queryTerm2], highlightClass);

                tdName.appendChild(firstName);

                let space = document.createElement("span");
                space.innerText = " ";

                tdName.appendChild(space);
                tdName.appendChild(lastName);

                tr.appendChild(tdName);
            } else {
                // Lastname,Firstname queries are specific, so we only highlight the search
                // term in the relevant name.
                let firstName = highlight(user.firstName, searchResults.queryTerm2, highlightClass);
                let lastName = highlight(user.lastName, searchResults.queryTerm1, highlightClass);

                tdName.appendChild(firstName);

                let space = document.createElement("span");
                space.innerText = " ";

                tdName.appendChild(space);
                tdName.appendChild(lastName);

                tr.appendChild(tdName);
            }
            resultsContainer.appendChild(tr);
        }

    };

    // Function to retrieve the search results from the serer.
    let getNewResults = function() {

        let query = searchInput.value;

        asyncReq("GET", "/Admin/CustomerSearch/api/search?nameQuery=" + query, {}, function() {
            if (this.readyState === XMLHttpRequest.DONE) {
                if (this.status === 200) {
                    resultBuilder(JSON.parse(this.response));
                } else {
                // TODO: error notification to user
                }
            } else {
                // TODO: add spinners
            }
        });

    };

    // Debounce the search function.
    let doSearch = debounce(getNewResults, searchInputDebounceTime);

    // Search whenever the input changes.
    searchInput.addEventListener("input", doSearch);
});
</script>